===============================
= General Game Playing Python =
===============================

Under construction. Not ready for habitation. Apply [here](mailto:ggpy@totalgood.com) for construction work...

Open Source!
------------

Anything by Hobson (the ggpy folder) is [MIT License](https://github.com/hobson/ggpy/tree/master/LICENSE.txt)
Other bits (like Sam Schreiber's ggp-base folder) have separate [FOSS licenses](https://github.com/hobson/ggpy/tree/master/ggp-base/licences)

Branches
--------

    - [j2py](https://github.com/hobson/ggpy/tree/j2py)  some of Sam's GGP-Base java packages ported to *nonworking* python.
    - [master](https://github.com/hobson/ggpy/tree/master)  python-from-scratch player server (under construction)
    - [sam](https://github.com/hobson/ggpy/tree/sam) -- most of Sam's java packages still in tact and working

Python Code Layout (plan)
------------------

 - reader -- A GDL parser/interpretter/lexer
 - player -- A GGP game playing service (socket server)
 - viewer -- An html5 viewer/logger/UX for players
 - util   -- Utilities 

Quick Start
-----------

Launch a player by running ggpy.player as a script from a unix shell or ggpy.player.start from a python shell

Details
-------

This is the plan...

    get_initial_state() -- retrieve the starting game state

    get_legal_moves(state, role) -- retrieve legal moves for <role> (player) in <state>

    is_terminal(state) -- indicates whether a state is terminal.

    get_goal(state, role) -- is the goal value for <role> in <state>.

    get_next_state(state, moves) -- where moves are legal <moves> for in <state>

    StateMachine(gdl) -- an instance of the state-machine generated using a prover 

See Sam Schreiber's original GGP-Base code and documentation for the canonical implementation and to check my logic.